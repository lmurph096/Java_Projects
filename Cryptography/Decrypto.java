//This program decrypts any message encrypted by the CRYPTO partner program.

import java.util.*;              //Import java.util which includes the Scanner class, allowing for user input.

public class Decrypto {
    public static void main(String[] args){
        Scanner input = new Scanner(System.in);         //Create scanner object.
        System.out.println("\n#############################################################################################################\n");
        System.out.println("Welcome to DECRYPTO\n");
        System.out.println("This program will decrypt any message produced by the CRYPTO program\n");
        System.out.println("#############################################################################################################\n");
        System.out.print("\nPlease enter the message to be decrypted: ");
        String message = input.nextLine();          //User enters the message encrypted message generated by CRYPTO
        System.out.print("\nPlease enter the unique encryption key: ");
        int shift = input.nextInt();                //User enters the same shift key used to encrypt the message in the CRYPTO program.
        System.out.println("\n#############################################################################################################\n");
        String newMessage = renormalise(message);   //Take the encrypted message and re-normalise it
        String finalMessage = decaesarify(newMessage, shift);     //Take the encrypted, re-normalised message and shift the characters back to their original positions.
        System.out.println("The decrypted message is: " + finalMessage);        //Displays the decrypted message.
        System.out.println("\n#############################################################################################################\n");
        System.out.print("Thank you for using DECRYPTO, enter any key to exit the program: ");
        int endMessage = input.nextInt();
        System.out.println(endMessage);
    }

    //This method takes the alphabet and shifts each character by an amount determined by the 'shift' input argument. The new 'shifted' alphabet is returned as a string.
    public static String shiftAlphabet(int shift) {
        int start = 0;
        if (shift < 0) {
            start = (int) 'Z' + shift;   //If the shift value is negative, convert character 'Z' to its ASCII value and add the shift value.
        } else {
            start = 'A' + shift;         //If the shift value is positive, convert character 'A' to its ASCII value and add the shift value.
        }                                //E.g if the shift value is '4', the resulting ASCII value wil be 065 + 4 = 069.

        String result = "";                     //Initialisation of the shifted alphabet string.
        char currChar = (char) start;           //Convert the shifted ASCII value back to a character. This denotes the shifted start point of the new alphabet string.
                                                //E.g a shifted ASCII value of 069 will correspond to the character 'E'.

        for(; currChar <= 'Z'; ++currChar) {    //This loop concatenates the 'result' string with the shifted start point as the first character. The result will be a shifted
            result = result + currChar;         //alphabet up to the character 'Z'. E.g. if 'E' was the shifted starting character ('currChar') the 'result' string would be
        }                                       //"EFGHIJKLMNOPQRSTUVWXYZ"

        if(result.length() < 26) {                                      //If statement to check if the 'result' string contains 26 characters of the alphabet.
            for(currChar = 'A'; result.length() < 26; ++currChar) {     //If less than 26 characters are present set the starting character to 'A', and concatenate the
                result = result + currChar;                             //'result' string until it contains 26 characters.
            }                                                           //Following from the initial example of a shift value of '4' and a starting value of 'E'
        }                                                               //the final result string will be "EFGHIJKLMNOPQRSTUVWXYZABCD", i.e. the alphabet shifted by 4 characters.
        return result; }

    //This method takes the encrypted message, removes any 'x' characters and spaces,
    public static String renormalise(String message){
        message = message.replaceAll("x", "");
        message = message.replaceAll(" ", "");
        return message;}


    //This method takes the re-normalised, caesarified message and de-caesarifies it.
    public static String decaesarify(String message, int shift){
        String oldAlphabet = shiftAlphabet(shift);                //Store the shifted alphabet into a string.
        String newAlphabet = shiftAlphabet(0);                    //Store the alphabet prior to shifting into a string.
        String newString = "";                                    //Initialise the string where the de-caesarified message will be stored.

        for (int n=0; n < message.length(); n++){
            char letter = message.charAt(n);                        //Each iteration of this loop will store each successive character of the caesarified message into the 'letter' variable.
            int index = oldAlphabet.indexOf(letter);                //The character in 'letter' is compared to the shifted alphabet to determine its index within the alphabet. E.g 'K' has an index of '6'
                                                                    //within an alphabet shifted down by '4'.
            newString = newString + newAlphabet.charAt(index); }    //The index of the character in the shifted alphabet is compared to the character which occurs at the same index in the
        return newString;                                           //unshifted alphabet (E.g the 6th index in an unshifted alphabet is the character 'G'). This character is concatenated to 'newString'
                                                                    //and the loop continues for all successive characters in the caesarified message up to lengthMessage. The result is the decryption
    }                                                               //of the caesarified generated by CRYPTO.
}
